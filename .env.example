# A 32-byte random string that every deployer needs to create. It is used for application-level security.
APP_KEY=Nit5tWts42QeCynT1Q476LyStDeSd4xb

# The ROOT IDENTIFIER (iss) of this OIDF environment. This value will end up as `iss` claim in issued credentials for the root account
ROOT_IDENTIFIER=http://localhost:8080

# The JDBC URL pointing to the PostgreSQL database instance
DATASOURCE_URL=jdbc:postgresql://db:5432/openid-federation-db
# Username used for database authentication
DATASOURCE_USER=openid-federation-db-user
# Password used for database authentication
DATASOURCE_PASSWORD=openid-federation-db-password
# Name of the database
DATASOURCE_DB=openid-federation-db

# The below 3 vars are being used by the Postgres docker image. If an external DB is being used they are not needed
POSTGRES_USER=${DATASOURCE_USER}
POSTGRES_PASSWORD=${DATASOURCE_PASSWORD}
POSTGRES_DB=${DATASOURCE_DB}

# Key cloak docker image settings
# If you are using an external OIDC capable IAM solution, you do not need this image!.
# Then just point the `OAUTH2_RESOURCE_SERVER_JWT_ISSUER_URI` value to the correct OIDC realm/issuer
# The keycloak admin user name that the server will be bootstrapped with. Change this value!
KC_BOOTSTRAP_ADMIN_USERNAME=admin
# The keycloak admin password that the server will be bootstrapped with. Change this value!
KC_BOOTSTRAP_ADMIN_PASSWORD=admin
# Whether to enable healt checks. Do not change normally!
KC_HEALTH_ENABLED=true
# The JAVA memeory related options for the Keycloak docker image
JAVA_OPTS=-XX:MaxRAMPercentage=75.0 -XX:InitialRAMPercentage=50.0 -XX:+UseG1GC

# The OIDC/OAUTH2 Isser. This is your OIDC issuer, provuding the trust/authentication. Defaults to the local KC instance deployed as docker container.
# Change to your OIDC environment if you have one, and then disable the keycloak deployment altogether
OAUTH2_RESOURCE_SERVER_JWT_ISSUER_URI=http://keycloak:8080/realms/openid-federation

DEV_MODE=false

# The logging level. Valid values are Verbose, Debug, Info, Warn, Error, Assert;
LOGGER_SEVERITY=Verbose

# CORS settings
CORS_ALLOWED_ORIGINS=*
CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS
CORS_ALLOWED_HEADERS=Authorization,Content-Type,X-Account-Username
CORS_MAX_AGE=3600

# The KMS provider to use. Either memory, azure or aws are supported. memory means that keys are not persisted at all!
KMS_PROVIDER=memory

# LOG Output format. Either JSON or TEXT is supported
LOGGER_OUTPUT=JSON

# The application ID used for accessing the Azure Keyvault
AZURE_KEYVAULT_APPLICATION_ID=
# The URL endpoint for the Azure Keyvault instance
AZURE_KEYVAULT_URL=
# The ID of the Azure AD tenant hosting the Keyvault
AZURE_KEYVAULT_TENANT_ID=
# The client ID used for authenticating to the Keyvault
AZURE_KEYVAULT_CLIENT_ID=
# The client secret used for secure access to the Keyvault
AZURE_KEYVAULT_CLIENT_SECRET=
# Maximum number of retries in case of transient failures while accessing Azure Keyvault
AZURE_KEYVAULT_MAX_RETRIES=5
# The initial delay in milliseconds used when retrying failed requests to Keyvault
AZURE_KEYVAULT_BASE_DELAY=200
# The maximum delay in milliseconds allowed between retries when accessing Keyvault
AZURE_KEYVAULT_MAX_DELAY=2000

# The AWS KMS region to use. For example eu-west-1
AWS_REGION=
# The access key id from the account associated with the KMS
AWS_ACCESS_KEY_ID=
#The secret access key from the account/token associated with the KMS
AWS_SECRET_ACCESS_KEY=
# The maximum number of retries for operations against AWS KMS, defaults to 10.
AWS_MAX_RETRIES=5
# The base delay (in milliseconds) before retrying a failed operation, defaults to 500
AWS_BASE_DELAY=200
# The maximum delay (in milliseconds) to wait between retries, defaults to 15000
AWS_MAX_DELAY=2000

